// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
   USER
   ADMIN
 }

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role Role @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model IGCSEClass {
    id         String    @id @default(cuid())
    year       Int
    series     String
    alumni     IGCSEAlumni[]

    @@unique([id])
}

// Each subject columns represent the corresponding grades
// 10 - A*  (100%)
// 9  - A*  (90% - 99%)
// 8  - A   (80% - 89%)
// 7  - B   (70% - 79%)
// 6  - C   (60% - 69%)
// 5  - D   (50% - 59%)
// 4  - E   (40% - 49%)
// 3  - F   (30% - 39%)
// 2  - F   (20% - 29%)
// 1  - F   (10% - 19%)
// 0  - F   (0% - 9%)
// -1 - NA

model IGCSEAlumni {
    id         String    @id @default(cuid())
    name       String
    image      String 
    esl        Int
    efl        Int
    emaths     Int
    amaths     Int
    chemistry  Int
    physics    Int
    biology    Int
    ict        Int
    cs         Int
    business   Int
    accounting Int
    economics  Int
    history    Int
    geography  Int
    extraSubjects           String?      // List of extra subjects using comma separated syntax. Eg: ['English Literature', 'Law']  
    extraSubjectsGrades     Int?         // List of grades of extra subjects using comma sepatarted syntax. Eg: [8, 9]
    totalMarks Int
    classId    String
    class      IGCSEClass     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([classId])
    @@unique([id])
}

model ALevelClass {
    id         String    @id @default(cuid())
    year       Int
    series     String
    alumni     ALevelAlumni[]

    @@unique([id])
}

// Each subject columns represent the corresponding grades
// 10 - A*  (100%)
// 9  - A*  (90% - 99%)
// 8  - A   (80% - 89%)
// 7  - B   (70% - 79%)
// 6  - C   (60% - 69%)
// 5  - D   (50% - 59%)
// 4  - E   (40% - 49%)
// 3  - F   (30% - 39%)
// 2  - F   (20% - 29%)
// 1  - F   (10% - 19%)
// 0  - F   (0% - 9%)
// -1 - NA

model ALevelAlumni {
    id              String    @id @default(cuid())
    name            String
    image           String
    english         Int 
    pureMaths       Int
    furtherMaths    Int 
    physics         Int 
    chemistry       Int
    biology         Int
    it              Int
    cs              Int
    business        Int
    accounting      Int
    economics       Int
    totalMarks      Int
    extraSubjects           String?      // List of extra subjects using comma separated syntax. Eg: ['Geography', 'History']  
    extraSubjectsGrades     Int?         // List of grades of extra subjects using comma sepatarted syntax. Eg: [8, 9]
    classId         String
    class      ALevelClass     @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@index([classId])
    @@unique([id])
}

model Announcement {
    id         String    @id @default(cuid())
    title      String
    image      String 
    text     String  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id])
}
